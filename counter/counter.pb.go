// Code generated by protoc-gen-go. DO NOT EDIT.
// source: counter.proto

/*
Package count is a generated protocol buffer package.

It is generated from these files:
	counter.proto

It has these top-level messages:
	Number
	SettingsRequest
	SettingsReply
*/
package count

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Counter value
type Number struct {
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Number) Reset()                    { *m = Number{} }
func (m *Number) String() string            { return proto.CompactTextString(m) }
func (*Number) ProtoMessage()               {}
func (*Number) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Number) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Settings to change
type SettingsRequest struct {
	Step  int64 `protobuf:"varint,1,opt,name=step" json:"step,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *SettingsRequest) Reset()                    { *m = SettingsRequest{} }
func (m *SettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SettingsRequest) ProtoMessage()               {}
func (*SettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SettingsRequest) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *SettingsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// The response message containing settings change status
type SettingsReply struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SettingsReply) Reset()                    { *m = SettingsReply{} }
func (m *SettingsReply) String() string            { return proto.CompactTextString(m) }
func (*SettingsReply) ProtoMessage()               {}
func (*SettingsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SettingsReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SettingsReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Number)(nil), "count.Number")
	proto.RegisterType((*SettingsRequest)(nil), "count.SettingsRequest")
	proto.RegisterType((*SettingsReply)(nil), "count.SettingsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Counter service

type CounterClient interface {
	// Works with counter
	GetNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Number, error)
	IncrementNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsReply, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) GetNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := grpc.Invoke(ctx, "/count.Counter/GetNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) IncrementNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/count.Counter/IncrementNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) SetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsReply, error) {
	out := new(SettingsReply)
	err := grpc.Invoke(ctx, "/count.Counter/SetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Counter service

type CounterServer interface {
	// Works with counter
	GetNumber(context.Context, *google_protobuf.Empty) (*Number, error)
	IncrementNumber(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SetSettings(context.Context, *SettingsRequest) (*SettingsReply, error)
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_GetNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.Counter/GetNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetNumber(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_IncrementNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).IncrementNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.Counter/IncrementNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).IncrementNumber(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.Counter/SetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).SetSettings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "count.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumber",
			Handler:    _Counter_GetNumber_Handler,
		},
		{
			MethodName: "IncrementNumber",
			Handler:    _Counter_IncrementNumber_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _Counter_SetSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}

func init() { proto.RegisterFile("counter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x51, 0x4b, 0x84, 0x40,
	0x14, 0x85, 0xb5, 0xd2, 0x65, 0x6f, 0xc9, 0xc2, 0xb4, 0x2c, 0x62, 0x2f, 0xcb, 0x40, 0xd0, 0xd3,
	0x2c, 0x54, 0x6f, 0xb1, 0x2f, 0xbb, 0x44, 0xf4, 0x12, 0x8b, 0xfb, 0x0b, 0x56, 0xbb, 0x89, 0xe4,
	0x38, 0xa6, 0xd7, 0xc8, 0xdf, 0xd7, 0x1f, 0x0b, 0xaf, 0x23, 0x41, 0x11, 0xbd, 0xdd, 0x73, 0x38,
	0x87, 0xe3, 0xe7, 0x40, 0x90, 0x9a, 0xb6, 0x24, 0xac, 0x55, 0x55, 0x1b, 0x32, 0xc2, 0x63, 0x19,
	0x5d, 0x64, 0xc6, 0x64, 0x05, 0xae, 0xd8, 0x4c, 0xda, 0x97, 0x15, 0xea, 0x8a, 0xba, 0x21, 0x23,
	0x97, 0xe0, 0x3f, 0xb5, 0x3a, 0xc1, 0x5a, 0x2c, 0xc0, 0x2f, 0xf9, 0x0a, 0xdd, 0xa5, 0x7b, 0x75,
	0x1c, 0x5b, 0x25, 0xef, 0x60, 0xb6, 0x47, 0xa2, 0xbc, 0xcc, 0x9a, 0x18, 0xdf, 0x5a, 0x6c, 0x48,
	0x08, 0x38, 0x69, 0x08, 0x2b, 0x1b, 0xe4, 0x5b, 0xcc, 0xc1, 0x2b, 0x72, 0x9d, 0x53, 0x78, 0xc4,
	0xe6, 0x20, 0xe4, 0x1a, 0x82, 0xef, 0x72, 0x55, 0x74, 0x7d, 0x35, 0x35, 0xcf, 0xc8, 0x55, 0x2f,
	0xe6, 0x5b, 0x84, 0x30, 0xd1, 0xd8, 0x34, 0x87, 0x0c, 0xb9, 0x3c, 0x8d, 0x47, 0x79, 0xfd, 0xe9,
	0xc2, 0x64, 0x3b, 0x30, 0x89, 0x5b, 0x98, 0x3e, 0x20, 0x8d, 0x1f, 0xab, 0x06, 0x28, 0x35, 0x42,
	0xa9, 0xfb, 0x1e, 0x2a, 0x0a, 0x14, 0x33, 0xab, 0x21, 0x26, 0x1d, 0xb1, 0x85, 0xd9, 0x63, 0x99,
	0xd6, 0xa8, 0xb1, 0xfc, 0xaf, 0xfb, 0x87, 0x2f, 0x1d, 0xb1, 0x86, 0xd3, 0x3d, 0xd2, 0x08, 0x22,
	0x16, 0x76, 0xe4, 0xc7, 0x6f, 0x89, 0xe6, 0xbf, 0xfc, 0xaa, 0xe8, 0xa4, 0xb3, 0xb9, 0x84, 0xf3,
	0x02, 0x5f, 0xcd, 0x7b, 0xad, 0xf0, 0xe3, 0xa0, 0x95, 0x7d, 0xa4, 0xcd, 0x99, 0x25, 0xdb, 0xf5,
	0x73, 0x3b, 0x37, 0xf1, 0x79, 0xf7, 0xe6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x32, 0x2f, 0xec, 0xdf,
	0xc6, 0x01, 0x00, 0x00,
}

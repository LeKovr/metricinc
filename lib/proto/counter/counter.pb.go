// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: counter.proto

/*
Package counter is a generated protocol buffer package.

It is generated from these files:
	counter.proto

It has these top-level messages:
	Number
	Settings
*/
package counter

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Number contains counter value
type Number struct {
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Number) Reset()                    { *m = Number{} }
func (m *Number) String() string            { return proto.CompactTextString(m) }
func (*Number) ProtoMessage()               {}
func (*Number) Descriptor() ([]byte, []int) { return fileDescriptorCounter, []int{0} }

func (m *Number) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Settings to change
type Settings struct {
	Step  int64 `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptorCounter, []int{1} }

func (m *Settings) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Settings) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*Number)(nil), "counter.Number")
	proto.RegisterType((*Settings)(nil), "counter.Settings")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Counter service

type CounterClient interface {
	// GetNumber returns current counter value
	GetNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Number, error)
	// IncrementNumber increments counter value
	IncrementNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// SetSettings stores new settings
	SetSettings(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// GetSettings returns current settings
	GetSettings(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Settings, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) GetNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := grpc.Invoke(ctx, "/counter.Counter/GetNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) IncrementNumber(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/counter.Counter/IncrementNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) SetSettings(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/counter.Counter/SetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetSettings(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := grpc.Invoke(ctx, "/counter.Counter/GetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Counter service

type CounterServer interface {
	// GetNumber returns current counter value
	GetNumber(context.Context, *google_protobuf.Empty) (*Number, error)
	// IncrementNumber increments counter value
	IncrementNumber(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// SetSettings stores new settings
	SetSettings(context.Context, *Settings) (*google_protobuf.Empty, error)
	// GetSettings returns current settings
	GetSettings(context.Context, *google_protobuf.Empty) (*Settings, error)
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_GetNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counter/GetNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetNumber(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_IncrementNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).IncrementNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counter/IncrementNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).IncrementNumber(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Settings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counter/SetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).SetSettings(ctx, req.(*Settings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counter/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetSettings(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "counter.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumber",
			Handler:    _Counter_GetNumber_Handler,
		},
		{
			MethodName: "IncrementNumber",
			Handler:    _Counter_IncrementNumber_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _Counter_SetSettings_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Counter_GetSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}

func init() { proto.RegisterFile("counter.proto", fileDescriptorCounter) }

var fileDescriptorCounter = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0xa4, 0xd3,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xc2, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25,
	0x95, 0x10, 0x55, 0x4a, 0x0a, 0x5c, 0x6c, 0x7e, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0x42, 0x62, 0x5c,
	0x6c, 0x79, 0x60, 0x96, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x94, 0xa7, 0x64, 0xc2, 0xc5,
	0x11, 0x9c, 0x5a, 0x52, 0x92, 0x99, 0x97, 0x5e, 0x2c, 0x24, 0xc4, 0xc5, 0x52, 0x5c, 0x92, 0x5a,
	0x00, 0x55, 0x01, 0x66, 0x0b, 0x89, 0x70, 0xb1, 0xe6, 0x64, 0xe6, 0x66, 0x96, 0x48, 0x30, 0x81,
	0x05, 0x21, 0x1c, 0xa3, 0x7f, 0x8c, 0x5c, 0xec, 0xce, 0x10, 0x07, 0x08, 0x99, 0x71, 0x71, 0xba,
	0xa7, 0x96, 0xc0, 0xac, 0xd1, 0x83, 0x38, 0x47, 0x0f, 0xe6, 0x1c, 0x3d, 0x57, 0x90, 0x73, 0xa4,
	0xf8, 0xf5, 0x60, 0xce, 0x87, 0x28, 0x54, 0x62, 0x10, 0x72, 0xe6, 0xe2, 0xf7, 0xcc, 0x4b, 0x2e,
	0x4a, 0xcd, 0x4d, 0xcd, 0x23, 0xa4, 0x1b, 0x87, 0xb8, 0x12, 0x83, 0x90, 0x15, 0x17, 0x77, 0x70,
	0x6a, 0x09, 0xdc, 0x07, 0x82, 0x70, 0x6b, 0x60, 0x42, 0xf8, 0xf5, 0xba, 0x23, 0xe9, 0xc5, 0x65,
	0x39, 0xa6, 0x99, 0x4a, 0x0c, 0x4e, 0x8a, 0x5c, 0x22, 0x99, 0xf9, 0x7a, 0x39, 0xa9, 0xd9, 0xf9,
	0x65, 0x45, 0x7a, 0xa9, 0x15, 0x89, 0xb9, 0x10, 0x45, 0x4e, 0xb0, 0x50, 0x09, 0x60, 0x4c, 0x62,
	0x03, 0x9b, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x57, 0x41, 0x3f, 0xcd, 0xb9, 0x01, 0x00,
	0x00,
}

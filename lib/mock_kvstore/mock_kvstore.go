// Code generated by MockGen. DO NOT EDIT.
// Source: lib/iface/kvstore/kvstore.go

// Package mock_kvstore is a generated GoMock package.
package mock_kvstore

import (
	gomock "github.com/golang/mock/gomock"
	setup "lekovr/exam/counter/setup"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetSettings mocks base method
func (m *MockStore) GetSettings() (*setup.Settings, error) {
	ret := m.ctrl.Call(m, "GetSettings")
	ret0, _ := ret[0].(*setup.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings
func (mr *MockStoreMockRecorder) GetSettings() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockStore)(nil).GetSettings))
}

// SetSettings mocks base method
func (m *MockStore) SetSettings(sets *setup.Settings) error {
	ret := m.ctrl.Call(m, "SetSettings", sets)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSettings indicates an expected call of SetSettings
func (mr *MockStoreMockRecorder) SetSettings(sets interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSettings", reflect.TypeOf((*MockStore)(nil).SetSettings), sets)
}

// GetNumber mocks base method
func (m *MockStore) GetNumber() (*int64, error) {
	ret := m.ctrl.Call(m, "GetNumber")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumber indicates an expected call of GetNumber
func (mr *MockStoreMockRecorder) GetNumber() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockStore)(nil).GetNumber))
}

// SetNumber mocks base method
func (m *MockStore) SetNumber(number *int64) error {
	ret := m.ctrl.Call(m, "SetNumber", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNumber indicates an expected call of SetNumber
func (mr *MockStoreMockRecorder) SetNumber(number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumber", reflect.TypeOf((*MockStore)(nil).SetNumber), number)
}

// Close mocks base method
func (m *MockStore) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}
